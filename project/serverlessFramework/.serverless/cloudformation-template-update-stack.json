{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "HelloLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/todoserverlessframework-dev-hello"
      }
    },
    "GrecaptchaVerifyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/todoserverlessframework-dev-grecaptchaVerify"
      }
    },
    "ListToDosLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/todoserverlessframework-dev-listToDos"
      }
    },
    "GetToDoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/todoserverlessframework-dev-getToDo"
      }
    },
    "CreateToDoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/todoserverlessframework-dev-createToDo"
      }
    },
    "DeleteToDoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/todoserverlessframework-dev-deleteToDo"
      }
    },
    "UpdateToDoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/todoserverlessframework-dev-updateToDo"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "todoserverlessframework",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/todoserverlessframework-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/todoserverlessframework-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:*"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "ToDoTable",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "todoserverlessframework",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "HelloLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/todoserverlessframework/dev/1623533984739-2021-06-12T21:39:44.739Z/todoserverlessframework.zip"
        },
        "Handler": "todo/hello.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "todoserverlessframework-dev-hello",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TODO_TABLE": "todo-serverless",
            "G_RECAPTCHA_ENDPOINT": "https://www.google.com/recaptcha/api/siteverify",
            "G_RECAPTCHA_SECRET_V2": "6LdFJsIaAAAAANksLu53O6eqJsUpjggm22Mg9pX5",
            "G_RECAPTCHA_SECRET_V3": "6LcP6b0aAAAAACUDJYgZEbD6CYUzmoG1GvJIBz8y"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HelloLogGroup"
      ]
    },
    "GrecaptchaVerifyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/todoserverlessframework/dev/1623533984739-2021-06-12T21:39:44.739Z/todoserverlessframework.zip"
        },
        "Handler": "todo/grecaptchaVerify.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "todoserverlessframework-dev-grecaptchaVerify",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TODO_TABLE": "todo-serverless",
            "G_RECAPTCHA_ENDPOINT": "https://www.google.com/recaptcha/api/siteverify",
            "G_RECAPTCHA_SECRET_V2": "6LdFJsIaAAAAANksLu53O6eqJsUpjggm22Mg9pX5",
            "G_RECAPTCHA_SECRET_V3": "6LcP6b0aAAAAACUDJYgZEbD6CYUzmoG1GvJIBz8y"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GrecaptchaVerifyLogGroup"
      ]
    },
    "ListToDosLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/todoserverlessframework/dev/1623533984739-2021-06-12T21:39:44.739Z/todoserverlessframework.zip"
        },
        "Handler": "todo/listToDos.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "todoserverlessframework-dev-listToDos",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TODO_TABLE": "todo-serverless",
            "G_RECAPTCHA_ENDPOINT": "https://www.google.com/recaptcha/api/siteverify",
            "G_RECAPTCHA_SECRET_V2": "6LdFJsIaAAAAANksLu53O6eqJsUpjggm22Mg9pX5",
            "G_RECAPTCHA_SECRET_V3": "6LcP6b0aAAAAACUDJYgZEbD6CYUzmoG1GvJIBz8y"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListToDosLogGroup"
      ]
    },
    "GetToDoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/todoserverlessframework/dev/1623533984739-2021-06-12T21:39:44.739Z/todoserverlessframework.zip"
        },
        "Handler": "todo/getToDo.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "todoserverlessframework-dev-getToDo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TODO_TABLE": "todo-serverless",
            "G_RECAPTCHA_ENDPOINT": "https://www.google.com/recaptcha/api/siteverify",
            "G_RECAPTCHA_SECRET_V2": "6LdFJsIaAAAAANksLu53O6eqJsUpjggm22Mg9pX5",
            "G_RECAPTCHA_SECRET_V3": "6LcP6b0aAAAAACUDJYgZEbD6CYUzmoG1GvJIBz8y"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetToDoLogGroup"
      ]
    },
    "CreateToDoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/todoserverlessframework/dev/1623533984739-2021-06-12T21:39:44.739Z/todoserverlessframework.zip"
        },
        "Handler": "todo/createToDo.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "todoserverlessframework-dev-createToDo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TODO_TABLE": "todo-serverless",
            "G_RECAPTCHA_ENDPOINT": "https://www.google.com/recaptcha/api/siteverify",
            "G_RECAPTCHA_SECRET_V2": "6LdFJsIaAAAAANksLu53O6eqJsUpjggm22Mg9pX5",
            "G_RECAPTCHA_SECRET_V3": "6LcP6b0aAAAAACUDJYgZEbD6CYUzmoG1GvJIBz8y"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateToDoLogGroup"
      ]
    },
    "DeleteToDoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/todoserverlessframework/dev/1623533984739-2021-06-12T21:39:44.739Z/todoserverlessframework.zip"
        },
        "Handler": "todo/deleteToDo.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "todoserverlessframework-dev-deleteToDo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TODO_TABLE": "todo-serverless",
            "G_RECAPTCHA_ENDPOINT": "https://www.google.com/recaptcha/api/siteverify",
            "G_RECAPTCHA_SECRET_V2": "6LdFJsIaAAAAANksLu53O6eqJsUpjggm22Mg9pX5",
            "G_RECAPTCHA_SECRET_V3": "6LcP6b0aAAAAACUDJYgZEbD6CYUzmoG1GvJIBz8y"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteToDoLogGroup"
      ]
    },
    "UpdateToDoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/todoserverlessframework/dev/1623533984739-2021-06-12T21:39:44.739Z/todoserverlessframework.zip"
        },
        "Handler": "todo/updateToDo.handler",
        "Runtime": "nodejs12.x",
        "FunctionName": "todoserverlessframework-dev-updateToDo",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "TODO_TABLE": "todo-serverless",
            "G_RECAPTCHA_ENDPOINT": "https://www.google.com/recaptcha/api/siteverify",
            "G_RECAPTCHA_SECRET_V2": "6LdFJsIaAAAAANksLu53O6eqJsUpjggm22Mg9pX5",
            "G_RECAPTCHA_SECRET_V3": "6LcP6b0aAAAAACUDJYgZEbD6CYUzmoG1GvJIBz8y"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateToDoLogGroup"
      ]
    },
    "HelloLambdaVersionRkvSCeH9GO3seCE83ZEp9ykDIqtkO569cuXgT9uE6w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HelloLambdaFunction"
        },
        "CodeSha256": "sxEessafSsXlTQH7VZI4TtYDOv6wZJmBJqC+9GJT7zU="
      }
    },
    "GrecaptchaVerifyLambdaVersionTT2Fi1V9d66I9EwofgchSA5Ii7DOyz2wphLYSlGzNs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GrecaptchaVerifyLambdaFunction"
        },
        "CodeSha256": "sxEessafSsXlTQH7VZI4TtYDOv6wZJmBJqC+9GJT7zU="
      }
    },
    "ListToDosLambdaVersionHPB3rvrynfJgyjvmC9VkSVhYFK3JnZPvRw42tuvw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListToDosLambdaFunction"
        },
        "CodeSha256": "sxEessafSsXlTQH7VZI4TtYDOv6wZJmBJqC+9GJT7zU="
      }
    },
    "GetToDoLambdaVersionejlXkT35d6dMXjjGrteEAWm8xVqhAUiV72NYasB2r2Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetToDoLambdaFunction"
        },
        "CodeSha256": "sxEessafSsXlTQH7VZI4TtYDOv6wZJmBJqC+9GJT7zU="
      }
    },
    "CreateToDoLambdaVersionmrZoAs4oGre5AY5KZwy8FvHnnMOzDq2YyZBwKmygI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateToDoLambdaFunction"
        },
        "CodeSha256": "sxEessafSsXlTQH7VZI4TtYDOv6wZJmBJqC+9GJT7zU="
      }
    },
    "DeleteToDoLambdaVersiontUxDAifV8vmLFTK9KbaNNpFfh4zWrmWvZAUqWKsmXk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteToDoLambdaFunction"
        },
        "CodeSha256": "sxEessafSsXlTQH7VZI4TtYDOv6wZJmBJqC+9GJT7zU="
      }
    },
    "UpdateToDoLambdaVersionjRZjwKRTqSZdWokFTNV9axI4XT0IY6NXpxA9r0nODY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateToDoLambdaFunction"
        },
        "CodeSha256": "sxEessafSsXlTQH7VZI4TtYDOv6wZJmBJqC+9GJT7zU="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-todoserverlessframework",
        "ProtocolType": "HTTP",
        "CorsConfiguration": {
          "AllowHeaders": [
            "*"
          ],
          "AllowMethods": [
            "OPTIONS",
            "GET",
            "POST",
            "DELETE",
            "PUT"
          ],
          "AllowOrigins": [
            "*"
          ]
        }
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "HttpApiAuthorizerToDoJwtAuthorizer": {
      "Type": "AWS::ApiGatewayV2::Authorizer",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "AuthorizerType": "JWT",
        "IdentitySource": [
          "$request.header.Authorization"
        ],
        "JwtConfiguration": {
          "Audience": [
            "60jvm1avgd6t55k4uc15dgu6iq"
          ],
          "Issuer": "https://cognito-idp.eu-west-2.amazonaws.com/eu-west-2_s4syVYS6n"
        },
        "Name": "ToDoJwtAuthorizer"
      }
    },
    "HelloLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HelloLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationHello": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "HelloLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRouteGetHello": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /hello",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationHello"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationHello"
    },
    "GrecaptchaVerifyLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GrecaptchaVerifyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGrecaptchaVerify": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GrecaptchaVerifyLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRoutePostVerify": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /verify",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGrecaptchaVerify"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGrecaptchaVerify"
    },
    "ListToDosLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListToDosLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationListToDos": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ListToDosLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRouteGetTodos": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /todos",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationListToDos"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerToDoJwtAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationListToDos"
    },
    "GetToDoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetToDoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetToDo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetToDoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRouteGetTodosIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /todos/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetToDo"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerToDoJwtAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationGetToDo"
    },
    "CreateToDoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateToDoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationCreateToDo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "CreateToDoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRoutePostTodos": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /todos",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationCreateToDo"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerToDoJwtAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationCreateToDo"
    },
    "DeleteToDoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteToDoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteToDo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteToDoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRouteDeleteTodosIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /todos/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteToDo"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerToDoJwtAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteToDo"
    },
    "UpdateToDoLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateToDoLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateToDo": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateToDoLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRoutePutTodosIdVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PUT /todos/{id}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateToDo"
              }
            ]
          ]
        },
        "AuthorizationType": "JWT",
        "AuthorizerId": {
          "Ref": "HttpApiAuthorizerToDoJwtAuthorizer"
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateToDo"
    },
    "ToDoTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "TableName": "todo-serverless",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "HelloLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HelloLambdaVersionRkvSCeH9GO3seCE83ZEp9ykDIqtkO569cuXgT9uE6w"
      }
    },
    "GrecaptchaVerifyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GrecaptchaVerifyLambdaVersionTT2Fi1V9d66I9EwofgchSA5Ii7DOyz2wphLYSlGzNs"
      }
    },
    "ListToDosLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListToDosLambdaVersionHPB3rvrynfJgyjvmC9VkSVhYFK3JnZPvRw42tuvw"
      }
    },
    "GetToDoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetToDoLambdaVersionejlXkT35d6dMXjjGrteEAWm8xVqhAUiV72NYasB2r2Q"
      }
    },
    "CreateToDoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateToDoLambdaVersionmrZoAs4oGre5AY5KZwy8FvHnnMOzDq2YyZBwKmygI"
      }
    },
    "DeleteToDoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteToDoLambdaVersiontUxDAifV8vmLFTK9KbaNNpFfh4zWrmWvZAUqWKsmXk"
      }
    },
    "UpdateToDoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateToDoLambdaVersionjRZjwKRTqSZdWokFTNV9axI4XT0IY6NXpxA9r0nODY"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      }
    }
  }
}